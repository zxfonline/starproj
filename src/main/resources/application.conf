akka {
  # 关闭日志记录
  #stdout-loglevel = "OFF"
  #debug配置选项 Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
  # 在actor系统启动时以INFO级别记录完整的配置 on,off
  log-config-on-start = on
  #当actor系统启动和关闭配置的loggers不会被使用。相反日志消息会打印到标准输出stdout（System.out）。对这个stdout logger的默认的日志级别是WARNING
  stdout-loglevel ="DEBUG"

  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  #loggers = ["akka.event.Logging$DefaultLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      # 记录用户级消息的细节，则使用akka.event.LoggingReceive包装你的actor行为
      receive = on
      # 记录Actor处理的所有自动接收的消息的细节
      autoreceive = on
      # 记录Actor的所有生命周期变化 (重启，死亡等 ) 的细节
      lifecycle = on
      # 记录所有继承了LoggingFSM的FSM actor的事件、状态转换和计时器的细节
      fsm = on
      # 监控对 ActorSystem.eventStream 的订阅/取消订阅
      event-stream = on
      unhandled=on
      router-misconfiguration = on
    }
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "java.lang.String" = java
      "akka.rgtech.bean.Customer" = java
      "com.google.protobuf.Message" = proto
    }
  }
  remote {
    # 以DEBUG级别查看所有远程发送的消息: (这些日志是被传输层发送时所记录的，而非actor)
    log-sent-messages = on
    # 以DEBUG级别查看所有接收到的远程消息: (这些日志是被传输层接收时所记录的，而非actor)
    log-received-messages = on
    # 以INFO级别查看的消息类型与大于指定限制的负载大小 (字节)
    log-frame-size-exceeding = 1000b
  }
}